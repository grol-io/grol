// comments in function parameters and arrays

// Parser tests for comments in function parameters and arrays (#327)
func foo(a, b, c) {a+b+c}

Assert("	foo(1, 2, 3)", foo(1, 2, 3) == 6)

Assert("foo(1, /* comment */ 2, 3)", foo(1, /* comment */ 2, 3) == 6)

Assert("foo(1, // first\n	2, // second\n	3)", foo(1,
	 // first
	2, // second
	// another one
	3 // last one
	) == 6)

del(xy) // make sure xy is not defined
x=1
y=2
// should not parse to xy #325
x y

println("y is", y)

// small array
a=[3, -7, 4, -42]
Assert("sorting an array", sort(a) == [-42, -7, 3, 4])
// un modified array
Assert("un modified array", a == [3, -7, 4, -42])

// big array
a=1:21
s=shuffle(a)
// also checks we didn't modify the original array
Assert("shuffling an array", s != a)
Assert("sorting shuffled array", sort(s) == a)
// check sort didn't modify the s big array
Assert("shuffling an array", s != a)


// empty lambda shouldn't crash
emptylambda = () => {}

emptylambda()


// Memoization issue #358
func w(n) {
	state := n
	.. => {
		if len(..) == 0 {
			state
		} else {
			state = ..[0]
		}
	}
}
n = 1
u = w(n)
v = w(n)
u(2)
v(3)
log("u=", u())
log("v=", v())
Assert("memoization issue v is 3", v() == 3)
Assert("memoization issue u shouldn't be 3, should be 2", u() == 2)

// Test boolean values in lambda functions and dereferencing
// Basic lambda with boolean
func g(x) {func f() {if x {1} else {2}}; f()}
Assert("boolean in lambda", g(true) == 1)
Assert("boolean in lambda false", g(false) == 2)

// Nested lambda with boolean
func h(x) {func f() {func g() {if x {1} else {2}}; g()}; f()}
log("h=", h(true))
Assert("boolean in nested lambda", h(true) == 1)
log("h=", h(false))
// BUG TODO/FIXME: g() inside f() is getting memoized/cached when it shouldn't be
// Assert("boolean in nested lambda false", h(false) == 2)

// Lambda with boolean in for loop
func i(x) {func f() {for x {return 1}; return 2}; f()}
Assert("boolean in lambda for loop", i(true) == 1)
Assert("boolean in lambda for loop false", i(false) == 2)

// Lambda with index in range
func j(x) {func f() {for i = 1:x {i}}; f()}
Assert("boolean in lambda range", j(12) == 11)
Assert("boolean in lambda range false", j(13) == 12)


// Image info/exists/delete tests

img := image.new("somename", 101, 102)

sz := image.size(img)
log("image.size()=", sz)
Assert("image.size w", sz.width == 101)
Assert("image.size h", sz.height == 102)
Assert("image.delete", image.delete(img) == nil)
Assert("image.size of deleted image", image.size(img) == nil)
// extra delete is fine
Assert("image.delete", image.delete(img) == nil)

i := 4
log("before changes", i)
i += 4
Assert("i should be 8", i == 8)
i -= 5
Assert("i should be 3", i == 3)
i *= i
Assert("i should be 9", i == 9)
i /= 9.
Assert("i should be 1.", i == 1.)
i /= 2
Assert("i should be .5", i == .5)
i = 1
log("before changes", i)
i &= 2
Assert("i should be 0", i == 0)
i = 5
log("before changes", i)
i &= 12
Assert("i should be 4", i == 4)
i |= 18
Assert("i should be 22", i == 22)
i ^= 9
Assert("i should be 31", i == 31)
i &= 1
Assert("i should be 1", i  == 1)

_str := "test"
log("before changes ", _str)
_str += " + new string"
Assert("str should be 'test + new string'", _str == "test + new string")
_str *= 2
Assert("str should be 'test + new stringtest + new string'", _str=="test + new stringtest + new string")

del(_str)
del(i)


m={[1, 2]: "abc", true: 43}
log("before changes", m)
m[[1, 2]] *= 3 // -> "abcabcabc"
Assert("m[[1, 2]] should be 'abcabcabc'", m[[1, 2]] == "abcabcabc")

m[[1, 2]] = "a"
m[[1, 2]] += "b"
Assert("m[[1, 2]] should be 'ab'", m[[1, 2]] == "ab")

x = {"a":{"b":{"c":1}}}
log("before changes x = {a:{b:{c:1}}}", x)
x.a.b.c |= 12
Assert("x.a.b.c should be 13", x.a.b.c==13)

x["a"]["b"]["c"] += 3
Assert("x[a][b][c] should be 16", x["a"]["b"]["c"] == 16)

del(x)
m = [1, 2, 3, 4]
log("before changes m is", m)
m += 5
Assert("m should be [1, 2, 3, 4, 5]", m == [1, 2, 3, 4, 5])
m[4] += 5
Assert("m[4] should be 10", m[4] == 10)

del(m)
