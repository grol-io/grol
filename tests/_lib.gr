/*

Library of macros for testing

*/

// When testing regressions using older grol versions (without builtin str):
/*
func str(s) {
	sprintf("%v",[s])
}
*/

// Test for absence of error and that the expression's result matches a regexp.
NoErr = macro(msg, expr, expectedRegexp) {
	quote(if (r = catch(unquote(expr))).err {
			error("FAIL unexpected error:", r.value, "for", unquote(msg))
		} else {
			sv = str(r.value)
			if regexp(unquote(expectedRegexp), sv) {
				println("OK", unquote(msg), "is:", r.value)
			} else {
				error(sprintf("FAIL %s didn't match expected: %v (str %q, regexp %q)", unquote(msg), r.value, sv, unquote(expectedRegexp)))
			}
		})
}

// Test for expected error and that the message matches a regexp.
IsErr = macro(msg, expr, expectedRegexp) {
	quote(if (r = catch(unquote(expr))).err {
			if (regexp(unquote(expectedRegexp), str(r.value))) {
				println("OK", unquote(msg), "get expected error:", r.value)
			} else {
				error("FAIL", unquote(msg), "didn't match expected:", r.value)
			}
		} else {
			error("FAIL", unquote(msg),"didn't get expected error:",r.value)
		})
}

// Assert a boolean expression is true.
Assert = macro(msg, expr) {
	quote(if (unquote(expr)) {
			println("OK", unquote(msg))
		} else {
			error("FAIL", unquote(msg))
		})
}
