
s :=0
// check that := works too in for loop.
for n := 4 {
	s = s+ n
}
// 0 + 1 + 2 + 3 = 6
if s != 6 {
	error("Expected 6, got", s) // was 16 before the fix.
}

// for of array/global (#328)

arr := [1,2,3]
res := 0
for i := arr {
	res = res +i
}
Assert("for of array/global", res == 6)

// same inside a function

func testRef() {
	res := 0
	for i := arr {
		res = res + i
	}
	return res
}

NoErr("for global array inside a function", testRef(), "6")

// scoping bug

list := ["A","B"]
ext := "X" // commenting this out hides the bug

// -- segv issue: --
func testScoping2() {
	res := []
	for ext := list {
		res = res + [ext]
	}
	return res
}
res1 := testScoping2()
log("res1:", res1)
del(ext)
res2 := testScoping2()
log("res2:", res2)
Assert("for scoping bug", res2 == ["A", "B"])
Assert("for scoping bug", res1 == ["A", "B"]) // segv comment out to see next test error
log("done with scoping bug")

// -- regular scoping bug --

func testScoping(i) {
	res := []
	for ext := list {
		res = res + [ext]
	}
	return res
}

res3 := testScoping("a") // should be ["A","B"] gets ["B", "B"]
log("res3:", res3)
ext := "X" // commenting this out hides the bug
res4 := testScoping("b")
log("res4:", res4)
Assert("for scoping bug", res3 == ["A", "B"] && res4 == ["A", "B"])

// -- reference deletion with for loop test --
list := ["A", "B"]
ext := "X"
func testForRefDelete() {
    res := []
    for x := list {
        res = res + [[x, ext]]
    }
    return res
}

res := testForRefDelete()
del(ext)
Assert("for ref delete", res == [["A", "X"], ["B", "X"]])

// -- for and break/continue bug --

func testforbreak(value) {
    count_aces := 0
    count_aces++
    for count_aces > 0 {
        if value <= 21 {
            log("early break", value)
            break
        }
        value = value - 10
        count_aces--
    }
    return value
}

func testforcontinue() {
    sum := 0
    for i := 10 { // 0, 1, 2, 3, 4, 5... but we skip 3 and break at 5
        if i == 3 {
            continue
        }
        if i == 5 {
            break // will return last eval
        }
		// log("summing", i, "sum", sum, "sum+i", sum+i)
        sum = sum + i
    }
}

Assert("early break", testforbreak(12) == 12)
Assert("do break", testforbreak(25) == 15)
cv := testforcontinue()
log("continue+break", cv)
Assert("continue+break", cv == 7) // 0 + 1 + 2 + 4 = 7 (skips 3, breaks after 4)
