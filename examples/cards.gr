// Define rectangle dimensions
func roundedRect(img, x, y, w, h, r) {
	// Start at top-right corner after the rounded part
	image.move_to(img, x + r, y)

	// Top edge and top-right corner
	image.line_to(img, x + w - r, y)
	image.quad_to(img, x + w, y, x + w, y + r)

	// Right edge and bottom-right corner
	image.line_to(img, x + w, y + h - r)
	image.quad_to(img, x + w, y + h, x + w - r, y + h)

	// Bottom edge and bottom-left corner
	image.line_to(img, x + r, y + h)
	image.quad_to(img, x, y + h, x, y + h - r)

	// Left edge and top-left corner
	image.line_to(img, x, y + r)
	image.quad_to(img, x, y, x + r, y)

	// Close the path
	image.close_path(img)
}

// Draw a heart
func heart(img, x, y, w, h) {
	centerX := x + w/2
	centerY := y + h/2

	// Start at the bottom point
	image.move_to(img, centerX, y + h)

	// Left bump
	image.cube_to(img,
		centerX - w/2, y + 2*h/3,     // First control: out to the left
		centerX - w/3, y,             // Second control: sharp angle at top
		centerX, y + h/3             // End point: where curves meet
	)
	// Right bump
	image.cube_to(img,
		centerX + w/3, y,             // First control: sharp angle at top
		centerX + w/2, y + 2*h/3,     // Second control: out to the right
		centerX, y + h               // End point: back to bottom
	)
	image.close_path(img)
}

// Function to define the path for a heart shape based on SVG quadratic commands
func drawHeartPath(img, x, y, w, h, upsideDown) {
    // SVG coordinates are in 0-20 range, we'll precalculate all points
    // All Y coordinates will be flipped if upsideDown is true

    // Scale factors
    sx := w / 20.0
    sy := h / 20.0

    // Helper lambda to flip Y coordinates if upsideDown
    flipY := func(svgY) {
        if upsideDown {
            return (20.0 - svgY) * sy + y
        }
        return svgY * sy + y
    }

    // Starting point (10,6)
    startX := x + 10 * sx
    startY := flipY(6)

    // First curve (Q10,0 15,0)
    cp1X := x + 10 * sx
    cp1Y := flipY(0)
    p1X := x + 15 * sx
    p1Y := cp1Y  // Same Y as control point

    // Second curve (reflected control point at 20,0)
    cp2X := x + 20 * sx
    cp2Y := cp1Y  // Same Y level
    p2X := x + 20 * sx
    p2Y := startY  // Back to start Y level

    // Third curve (Q20,10 15,14)
    cp3X := p2X  // Same X as end of last curve
    cp3Y := flipY(10)
    p3X := x + 15 * sx
    p3Y := flipY(14)

    // Fourth curve (reflected control at 10,18)
    cp4X := x + 10 * sx
    cp4Y := flipY(18)
    p4X := x + 10 * sx
    p4Y := flipY(20)  // Bottom tip

    // Fifth curve (Q10,18 5,14)
    cp5X := cp4X  // Same X
    cp5Y := cp4Y  // Same Y
    p5X := x + 5 * sx
    p5Y := p3Y  // Mirror of p3Y

    // Sixth curve (reflected control at 0,10)
    cp6X := x + 0
    cp6Y := cp3Y  // Mirror of cp3Y
    p6X := cp6X
    p6Y := startY  // Same Y as start

    // Seventh curve (Q0,0 5,0)
    cp7X := cp6X
    cp7Y := cp1Y  // Same Y level as first curve
    p7X := x + 5 * sx
    p7Y := cp7Y

    // Final curve back to start (reflected control at 10,0)
    cp8X := x + 10 * sx
    cp8Y := cp7Y
    p8X := startX
    p8Y := startY

    // Draw the path
    image.move_to(img, startX, startY)
    image.quad_to(img, cp1X, cp1Y, p1X, p1Y)
    image.quad_to(img, cp2X, cp2Y, p2X, p2Y)
    image.quad_to(img, cp3X, cp3Y, p3X, p3Y)
    image.quad_to(img, cp4X, cp4Y, p4X, p4Y)
    image.quad_to(img, cp5X, cp5Y, p5X, p5Y)
    image.quad_to(img, cp6X, cp6Y, p6X, p6Y)
    image.quad_to(img, cp7X, cp7Y, p7X, p7Y)
    image.quad_to(img, cp8X, cp8Y, p8X, p8Y)
    image.close_path(img)
}

// Function to draw a filled heart
func drawHeart(img, x, y, w, h, color, upsideDown) {
    // Define the heart's path
    drawHeartPath(img, x, y, w, h, upsideDown)
    // Fill the defined path with the specified color
    image.draw(img, color)
    // Alternatively, use image.draw(img, color, thickness) for an outlined heart
}

// Helper function to return default if value is nil
func or(val, default_val) {
    if val == nil {
        return default_val
    }
    return val
}

// Function to center multi-line text at specified coordinates
func center_text(img, cx, cy, text, ..) {
    opts := ..[0] // var args to get last optional argument, which is a map if provided
    // Set defaults for optional parameters and override with any provided options
    size := or(opts.size, 18.)  // Default size
    color := or(opts.color, [0, 0, 0, 255])  // Default black
    variant := or(opts.variant, "regular")  // Default font
    spacing := or(opts.spacing, 1.)  // Default spacing

    // Split text into lines using Grol's split function
    lines := split(text, "\n")

    // Calculate total height with spacing using "Xg" for better height measurement
    lineHeight := image.text_size("Xg", size, variant).height
    spacedLineHeight := lineHeight * spacing
    totalHeight := spacedLineHeight * (len(lines) - 1) + lineHeight  // Last line doesn't need spacing

    // Start position for first line
    y := cy - totalHeight/2 + lineHeight/2

    // Draw each line centered
    for line := lines {
        textSize := image.text_size(line, size, variant)
        x := cx - textSize.width/2
        image.text(img, x, y, size, line, color, variant)
        y = y + spacedLineHeight
    }
}

// Create a new image
w:= 350
h:= 500
img = image.new("myimg", w, h)

margin := 10

roundedRect(img, margin, margin, w-2*margin, h-2*margin, 10)
// Draw with white color
image.draw(img, [255, 255, 255])

// simple heart
heart(img, w/2-6*margin, h/2-6*margin, 12*margin, 10*margin)
image.draw(img, [255, 165, 0])

// more advanced heart from svg
drawHeart(img, 3*margin, 3*margin, 6*margin, 6*margin, [255, 0, 0], false)
drawHeart(img, w-9*margin, h-9*margin, 6*margin, 6*margin, [255, 0, 0], true)
image.draw(img, [255, 0, 0])

// Draw text with different sizes and variants
// image.text(img, 2*margin, 40, 12, "Small blye text", [0, 0, 255])  // Blue text
// image.text(img, 2*margin, 80, 24, "Large bold text", [255, 255, 0], "bold")  // Yellow bold text

// Draw centered multi-line text with options
center_text(img, w/2, h/2, "Semi\ntransparent\nitalic green\nhuge text", {
    "size": 52,
    "color": [0, 255, 0, 128],
    "variant": "italic",
})

center_text(img, w/2, h/2, "purple", {
    "size": 52,
    "color": [255, 0, 255, 200],
    "variant": "bold"
})

center_text(img, w/2, h/2, "defaults")

// Save to grol.png
image.save(img)

println("Rounded rectangle saved to grol.png")
