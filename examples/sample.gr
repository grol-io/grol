/*
   Sample file that our gorepl can interpret
   This is a block commen
   See also the other *.gr files
*/
unless = macro(cond, iffalse, iftrue) {
    quote(if (!(unquote(cond))) {
        unquote(iffalse)
    } else {
        unquote(iftrue)
    })
}

unless(10 > 5, print("BUG: not greater\n"), print("macro test: greater\n"))

fact=func(n) { // first class function objects, can also be written as `func fact(n) {` as shorthand
    log("called fact ", n) // log (timestamped stderr output)
    if (n<=1) {
        return 1
    }
    /* recursion: */ n*self(n-1) // also last evaluated expression is returned (ie return at the end is optional)
}

a=[fact(5), "abc", 76-3] // array can contain different types

m={"key": a, 73: 29} // so do maps

println("m is:", m) // stdout print
println("Outputting a smiley: ðŸ˜€")

first(m["key"]) // get the value from key from map, which is an array, and the first element of the array is our factorial 5
// could also have been m["key"][0]

// ^^^ gorepl sample.gr should output 120
