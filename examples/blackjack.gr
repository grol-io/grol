#! /usr/bin/env grol -s
/*
  Blackjack simulation.
  With pluggable dealer and player strategies/scripts/functions.
*/

// A hand/current game is, for the player: the 2 dealer cards, first one being hidden, and the player's cards.


// Cards map of string to int value
cards := {
  "A": 11, // Ace can be 11 or 1
  "2": 2,
  "3": 3,
  "4": 4,
  "5": 5,
  "6": 6,
  "7": 7,
  "8": 8,
  "9": 9,
  "10": 10,
  "J": 10,
  "Q": 10,
  "K": 10,
}

// Suits
suits = ["♥", "♦", "♣", "♠"]

// Generate a deck of cards
func fullDeck() {
  deck := []
  for suit := suits {
    for card := cards {
      deck = deck + [[card.key, suit]]
    }
  }
  return deck
}

bjs := {
  "do_print": true,
  "num_decks" : 6,
  "new_decks_at" : 20.0, // new decks shuffle at this % of shoe left
  "decks" : [],
  "player_hand" : [],
  "dealer_hand" : [],
  "player_hand_value" : 0,
  "dealer_hand_value" : 0,
  "player_balance" : 100,
  "bet" : 10,
  "end_game" : true,
  // Methods
  "printf": (..) => {
    if bjs.do_print {
      printf(..)
    }
  },
  "newDecks": () => {
    remaining := len(bjs.decks)
    bjs.decks = shuffle(fullDeck()*bjs.num_decks)
    bjs.printf("New decks: %d cards shuffled, %d cards left before\n", len(bjs.decks), remaining)
  },
  "dealCard": () => {
    card := bjs.decks[0]
    bjs.decks = bjs.decks[1:]
    t:= bjs.new_decks_at*52.*bjs.num_decks/100.
    if len(bjs.decks) <= t {
      bjs.newDecks()
    }
    return [card]
  },
  "newTurn": () => {
    bjs.dealer_hand = bjs.dealCard()
    bjs.dealer_hand = bjs.dealer_hand + bjs.dealCard()
    bjs.dealer_hand_value = 0 // don't leak it through logs/don't calculate it yet
    bjs.player_hand = bjs.dealCard()
    bjs.player_hand = bjs.player_hand + bjs.dealCard()
    bjs.end_game = false
    bjs.printf("\nNew turn, dealer hand: [[X] %v]\n", (bjs.dealer_hand)[1:])
    bjs.player_hand_value = bjs.handValue(bjs.player_hand)
    bjs.printf("Player hand: %v - pts %d\n", bjs.player_hand, bjs.player_hand_value)
    bjs.earlyPlayerStop()
  },
  "earlyPlayerStop": () => {
    // log("earlyPlayerStop", bjs.player_hand_value)
    if bjs.player_hand_value > 21 {
      bjs.printf("Player busts\n")
      bjs.completeDealerTurn()
    } else if bjs.player_hand_value == 21 {
      bjs.printf("Player 21 (likely win)\n")
      bjs.completeDealerTurn()
    }
  },
  "hit": () => {
    bjs.player_hand = bjs.player_hand + bjs.dealCard()
    bjs.player_hand_value = bjs.handValue(bjs.player_hand)
    bjs.printf("Player new hand: %v - pts %d\n", bjs.player_hand, bjs.player_hand_value)
    bjs.earlyPlayerStop()
  },
  "dealerHit": () => {
    prevValue := bjs.dealer_hand_value
    bjs.dealer_hand = bjs.dealer_hand + bjs.dealCard()
    bjs.dealer_hand_value = bjs.handValue(bjs.dealer_hand)
    bjs.printf("Dealer hit (%d)! new hand: %v - pts %d\n", prevValue, bjs.dealer_hand, bjs.dealer_hand_value)
  },
  // like player strategy, true for hit, false for stand
  "dealerStrategy": () => {
    if bjs.dealer_hand_value == 0 { // don't recalc it just got calculated in dealerHit except first time
      bjs.dealer_hand_value = bjs.handValue(bjs.dealer_hand)
    }
    // hit until 17 or higher
    return bjs.dealer_hand_value <= 16
  },
  "completeDealerTurn": () => {
    bjs.dealer_hand_value = bjs.handValue(bjs.dealer_hand)
    for bjs.dealerStrategy() {
      bjs.dealerHit()
    }
    if bjs.dealer_hand_value > 21 {
      bjs.printf("Dealer bust %v: %d\n", bjs.dealer_hand, bjs.dealer_hand_value)
    } else {
      bjs.printf("Dealer stands %v: %d\n", bjs.dealer_hand, bjs.dealer_hand_value)
    }
    bjs.evaluateGame()
  },
  "evaluateGame": () => {
    bjs.player_balance = round(bjs.player_balance + bjs.evaluateGameDetails()*bjs.bet)
    bjs.printf("New player balance: $%d\n", bjs.player_balance)
    bjs.end_game = true
  },
  "evaluateGameDetails": () => {
    // log("evaluateGame", bjs.player_hand_value, bjs.dealer_hand_value)
    pbj := bjs.isBlackjack(bjs.player_hand)
    dbj := bjs.isBlackjack(bjs.dealer_hand)
    if pbj {
      if dbj {
        bjs.printf("Both blackjack, Push\n")
        return 0
      } else {
        bjs.printf("Player wins Blackjack to %d\n", bjs.dealer_hand_value)
        return 1.5
      }
    }
    if bjs.player_hand_value > 21 {
      return -1
    }
    if bjs.dealer_hand_value > 21 {
      bjs.printf("Dealer busts %d\n", bjs.dealer_hand_value)
      return 1
    }
    if bjs.player_hand_value > bjs.dealer_hand_value {
      bjs.printf("Player wins %d to %d\n", bjs.player_hand_value, bjs.dealer_hand_value)
      return 1
    }
    if bjs.player_hand_value < bjs.dealer_hand_value {
      bjs.printf("Dealer wins %d to %d\n", bjs.dealer_hand_value, bjs.player_hand_value)
      return -1
    }
    bjs.printf("Push %d - %d\n", bjs.player_hand_value, bjs.dealer_hand_value)
    return 0
  },
  "isBlackjack": (hand) => {
    return len(hand) == 2 && bjs.handValue(hand) == 21
  },
  "handValue": (hand) => {
    value := 0
    count_aces := 0
    for card := hand {
      card_value := cards[card[0]]
      // log("card: ", card, "value: ", card_value)
      if card_value == 11 {
        count_aces++
      }
      value = value + card_value
    }
    for count_aces > 0 {
      if value <= 21 {
        break
      }
      value = value - 10
      count_aces--
    }
    return value
  }
}
bjs.newDecks()

func playBlackjack() {
  printf("Play Blackjack!\n")
  bjs.player_balance = 100 // reset balance if called again.
  bjs.do_print = true
  bjs.end_game = true
  printf("Player balance: $%d - bet $%d\n", bjs.player_balance, bjs.bet)
  println("<return> or h to hit, s to stand. (q or eof to quit)")
  for true {
    if bjs.player_balance < bjs.bet {
      printf("You ran out of money (need $%d min)! Game over, player balance: $%d\n", bjs.bet, bjs.player_balance)
      break
    }
    for bjs.end_game { // multiple blackjacks in a row
      bjs.newTurn()
    }
    inp := trim(read())
    if inp == "q" || eof() {
      printf("Bye\n")
      break
    } else if inp == "h" || inp == "" { // newline but not eof
      printf("Player hit requested\n")
      bjs.hit()
    } else if inp == "s" {
      printf("Player stand requested\n")
      bjs.completeDealerTurn()
    } else {
      printf("Invalid input: %s\n", inp)
    }
  }
}

// basic sample strategy, hit until 15
hitUntil := 15
// true means hit, false means stand
func playerSimpleStrategy() {
  return bjs.player_hand_value < hitUntil
}

// TODO: somehow using a lambda doesn't work, needs to be a plain global function.
func blackjackAutoPlay(playerStrategy) {
  bjs.player_balance = 100 // reset balance if called again
  bjs.do_print = false
  printf("Player balance: $%d - bet $%d\n", bjs.player_balance, bjs.bet)
  turns := 0
  max_balance := 0
  for bjs.player_balance >= bjs.bet {
    turns++
    if bjs.end_game {
      if bjs.player_balance > max_balance {
        printf("\rTurn %d: New max balance: $%d...", turns, bjs.player_balance)
        flush()
        max_balance = bjs.player_balance
      }
      bjs.newTurn()
    }
    // let strategy hit as long as it wants and the hand isn't over
    for !bjs.end_game && playerStrategy() {
      bjs.hit()
    }
    // if hand still not finished, resolve dealer side
    if !bjs.end_game {
      bjs.completeDealerTurn()
    }
  }
  println("\nPlayer ran out of money in", turns, "turns, max balance:", max_balance)
  return [turns, max_balance]
}

// Run from shell script eg `./blackjack.gr` interactive mode:
if info.globals.args {
  playBlackjack()
} else {
  if info.globals.interactive {
    // load()ed from repl prompt:
    println("Use playBlackjack() to play interactively")
    println("Use blackjackAutoPlay(playerSimpleStrategy) to test a player strategy")
  } else {
    // just part of command line files (like in make tests/checks/...)
    println("blackjack.gr - loaded as library, use ./blackjack.gr to play interactively")
    println("or load(\"blackjack.gr\") to try blackjackAutoPlay(playerSimpleStrategy)")
  }
}
// try somehow it diverges with ever increasing balances!
// hitUntil=12;maxBal=0;sumTurns=0; for 1000 {r:=blackjackAutoPlay(playerSimpleStrategy); sumTurns=sumTurns+r[0]; maxBal=max(r[1],maxBal)}; [sumTurns, maxBal]
