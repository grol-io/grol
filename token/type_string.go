// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ILLEGAL-0]
	_ = x[EOL-1]
	_ = x[startValueTokens-2]
	_ = x[IDENT-3]
	_ = x[INT-4]
	_ = x[FLOAT-5]
	_ = x[STRING-6]
	_ = x[LINECOMMENT-7]
	_ = x[BLOCKCOMMENT-8]
	_ = x[REGISTER-9]
	_ = x[endValueTokens-10]
	_ = x[startSingleCharTokens-11]
	_ = x[ASSIGN-12]
	_ = x[PLUS-13]
	_ = x[MINUS-14]
	_ = x[ASTERISK-15]
	_ = x[SLASH-16]
	_ = x[BITAND-17]
	_ = x[BITOR-18]
	_ = x[BITXOR-19]
	_ = x[BITNOT-20]
	_ = x[BANG-21]
	_ = x[PERCENT-22]
	_ = x[LT-23]
	_ = x[GT-24]
	_ = x[COMMA-25]
	_ = x[SEMICOLON-26]
	_ = x[LPAREN-27]
	_ = x[RPAREN-28]
	_ = x[LBRACE-29]
	_ = x[RBRACE-30]
	_ = x[LBRACKET-31]
	_ = x[RBRACKET-32]
	_ = x[COLON-33]
	_ = x[DOT-34]
	_ = x[endSingleCharTokens-35]
	_ = x[startMultiCharTokens-36]
	_ = x[LTEQ-37]
	_ = x[GTEQ-38]
	_ = x[EQ-39]
	_ = x[NOTEQ-40]
	_ = x[INCR-41]
	_ = x[DECR-42]
	_ = x[DOTDOT-43]
	_ = x[OR-44]
	_ = x[AND-45]
	_ = x[LEFTSHIFT-46]
	_ = x[RIGHTSHIFT-47]
	_ = x[LAMBDA-48]
	_ = x[DEFINE-49]
	_ = x[SUMASSIGN-50]
	_ = x[SUBASSIGN-51]
	_ = x[PRODASSIGN-52]
	_ = x[DIVASSIGN-53]
	_ = x[ANDASSIGN-54]
	_ = x[ORASSIGN-55]
	_ = x[XORASSIGN-56]
	_ = x[endMultiCharTokens-57]
	_ = x[startIdentityTokens-58]
	_ = x[FUNC-59]
	_ = x[TRUE-60]
	_ = x[FALSE-61]
	_ = x[IF-62]
	_ = x[ELSE-63]
	_ = x[RETURN-64]
	_ = x[FOR-65]
	_ = x[BREAK-66]
	_ = x[CONTINUE-67]
	_ = x[MACRO-68]
	_ = x[QUOTE-69]
	_ = x[UNQUOTE-70]
	_ = x[LEN-71]
	_ = x[FIRST-72]
	_ = x[REST-73]
	_ = x[PRINT-74]
	_ = x[PRINTLN-75]
	_ = x[LOG-76]
	_ = x[ERROR-77]
	_ = x[CATCH-78]
	_ = x[DEL-79]
	_ = x[endIdentityTokens-80]
	_ = x[EOF-81]
}

const _Type_name = "ILLEGALEOLstartValueTokensIDENTINTFLOATSTRINGLINECOMMENTBLOCKCOMMENTREGISTERendValueTokensstartSingleCharTokensASSIGNPLUSMINUSASTERISKSLASHBITANDBITORBITXORBITNOTBANGPERCENTLTGTCOMMASEMICOLONLPARENRPARENLBRACERBRACELBRACKETRBRACKETCOLONDOTendSingleCharTokensstartMultiCharTokensLTEQGTEQEQNOTEQINCRDECRDOTDOTORANDLEFTSHIFTRIGHTSHIFTLAMBDADEFINESUMASSIGNSUBASSIGNPRODASSIGNDIVASSIGNANDASSIGNORASSIGNXORASSIGNendMultiCharTokensstartIdentityTokensFUNCTRUEFALSEIFELSERETURNFORBREAKCONTINUEMACROQUOTEUNQUOTELENFIRSTRESTPRINTPRINTLNLOGERRORCATCHDELendIdentityTokensEOF"

var _Type_index = [...]uint16{0, 7, 10, 26, 31, 34, 39, 45, 56, 68, 76, 90, 111, 117, 121, 126, 134, 139, 145, 150, 156, 162, 166, 173, 175, 177, 182, 191, 197, 203, 209, 215, 223, 231, 236, 239, 258, 278, 282, 286, 288, 293, 297, 301, 307, 309, 312, 321, 331, 337, 343, 352, 361, 371, 380, 389, 397, 406, 424, 443, 447, 451, 456, 458, 462, 468, 471, 476, 484, 489, 494, 501, 504, 509, 513, 518, 525, 528, 533, 538, 541, 558, 561}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
